{"version":3,"sources":["extensions/tenantGlobalNavBar/TenantGlobalNavBarApplicationCustomizer.ts"],"names":[],"mappings":"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","file":"extensions/tenantGlobalNavBar/TenantGlobalNavBarApplicationCustomizer.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDom from 'react-dom';\r\n\r\nimport { override } from '@microsoft/decorators';\r\nimport { Log } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseApplicationCustomizer,\r\n  PlaceholderContent,\r\n  PlaceholderName\r\n} from '@microsoft/sp-application-base';\r\n\r\nimport { escape } from '@microsoft/sp-lodash-subset'; \r\n\r\nimport TenantGlobalNavBar from './components/TenantGlobalNavBar';\r\nimport { ITenantGlobalNavBarProps } from './components/ITenantGlobalNavBarProps';\r\nimport TenantGlobalFooterBar from './components/TenantGlobalFooterBar';\r\nimport { ITenantGlobalFooterBarProps } from './components/ITenantGlobalFooterBarProps';\r\nimport TenantMegaMenu from './components/TenantMegaMenu';\r\nimport { ITenantMegaMenuProps } from './components/ITenantMegaMenuProps';\r\n\r\nimport * as SPTermStore from './services/SPTermStoreService'; \r\nimport pnp from \"sp-pnp-js\";\r\n\r\nimport styles from './AppCustomizer.module.scss';\r\nimport * as strings from 'TenantGlobalNavBarApplicationCustomizerStrings';\r\n\r\nconst LOG_SOURCE: string = 'TenantGlobalNavBarApplicationCustomizer';\r\nconst NAV_TERMS_KEY: string = 'global-navigation-terms';\r\n\r\n/**\r\n * If your command set uses the ClientSideComponentProperties JSON input,\r\n * it will be deserialized into the BaseExtension.properties object.\r\n * You can define an interface to describe it.\r\n */\r\nexport interface ITenantGlobalNavBarApplicationCustomizerProperties {\r\n  TopMenuTermSet?: string;\r\n  BottomMenuTermSet?: string;\r\n  TopNavStyle?: string;\r\n}\r\n\r\n/** A Custom Action which can be run during execution of a Client Side Application */\r\nexport default class TenantGlobalNavBarApplicationCustomizer\r\n  extends BaseApplicationCustomizer<ITenantGlobalNavBarApplicationCustomizerProperties> {\r\n\r\n  private _topPlaceholder: PlaceholderContent | undefined;\r\n  private _bottomPlaceholder: PlaceholderContent | undefined;\r\n  private _topMenuItems: SPTermStore.ISPTermObject[];\r\n  private _bottomMenuItems: SPTermStore.ISPTermObject[];\r\n  \r\n  @override\r\n  public async onInit(): Promise<void> {\r\n    Log.info(LOG_SOURCE, `Initialized ${strings.Title}`);\r\n\r\n    // Configure caching\r\n    pnp.setup({\r\n      defaultCachingStore: \"session\", \r\n      defaultCachingTimeoutSeconds: 900, //15min\r\n      globalCacheDisable: false // true to disable caching in case of debugging/testing\r\n    });\r\n\r\n    // Retrieve the menu items from taxonomy\r\n    let termStoreService: SPTermStore.SPTermStoreService = new SPTermStore.SPTermStoreService({\r\n      spHttpClient: this.context.spHttpClient,\r\n      siteAbsoluteUrl: this.context.pageContext.web.absoluteUrl,\r\n    });\r\n\r\n    if (this.properties.TopMenuTermSet != null) {\r\n      let cachedTerms = pnp.storage.session.get(NAV_TERMS_KEY);\r\n      if(cachedTerms != null){\r\n        this._topMenuItems = cachedTerms;\r\n      }\r\n      else {\r\n        this._topMenuItems = await termStoreService.getTermsFromTermSetAsync(this.properties.TopMenuTermSet);\r\n        pnp.storage.session.put(NAV_TERMS_KEY,this._topMenuItems);\r\n      }\r\n    }\r\n    if (this.properties.BottomMenuTermSet != null) {\r\n      this._bottomMenuItems = await termStoreService.getTermsFromTermSetAsync(this.properties.BottomMenuTermSet);\r\n    }\r\n\r\n    // Call render method for generating the needed html elements\r\n    this._renderPlaceHolders();\r\n\r\n    return Promise.resolve<void>();\r\n  }\r\n\r\n  private _renderPlaceHolders(): void {\r\n    \r\n    console.log('Available placeholders: ',\r\n      this.context.placeholderProvider.placeholderNames.map(name => PlaceholderName[name]).join(', '));\r\n\r\n    // Handling the top placeholder\r\n    if (!this._topPlaceholder) {\r\n      this._topPlaceholder =\r\n        this.context.placeholderProvider.tryCreateContent(\r\n          PlaceholderName.Top,\r\n          { onDispose: this._onDispose });\r\n\r\n      // The extension should not assume that the expected placeholder is available.\r\n      if (!this._topPlaceholder) {\r\n        console.error('The expected placeholder (Top) was not found.');\r\n        return;\r\n      }\r\n\r\n      if (this._topMenuItems != null && this._topMenuItems.length > 0) {\r\n        let element : any = null;\r\n\r\n        switch(this.properties.TopNavStyle) {\r\n          case 'megaMenu' : {\r\n            const megaMenu: React.ReactElement<ITenantMegaMenuProps> = React.createElement(\r\n              TenantMegaMenu,\r\n              {\r\n                menuItems: this._topMenuItems,\r\n              }\r\n            );\r\n            element = megaMenu;\r\n            break;\r\n          }\r\n          default: {\r\n            const commandBarMenu : React.ReactElement<ITenantGlobalNavBarProps> = React.createElement(\r\n              TenantGlobalNavBar,\r\n              {\r\n                menuItems: this._topMenuItems,\r\n              }\r\n            );\r\n            element = commandBarMenu;\r\n            break;\r\n          }\r\n        }\r\n    \r\n        ReactDom.render(element, this._topPlaceholder.domElement);\r\n      }\r\n    }\r\n\r\n    // Handling the bottom placeholder\r\n    if (!this._bottomPlaceholder) {\r\n      this._bottomPlaceholder =\r\n        this.context.placeholderProvider.tryCreateContent(\r\n          PlaceholderName.Bottom,\r\n          { onDispose: this._onDispose });\r\n\r\n      // The extension should not assume that the expected placeholder is available.\r\n      if (!this._bottomPlaceholder) {\r\n        console.error('The expected placeholder (Bottom) was not found.');\r\n        return;\r\n      }\r\n\r\n      if (this._bottomMenuItems != null && this._bottomMenuItems.length > 0) {\r\n        const element: React.ReactElement<ITenantGlobalNavBarProps> = React.createElement(\r\n          TenantGlobalFooterBar,\r\n          {\r\n            menuItems: this._bottomMenuItems,\r\n          }\r\n        );\r\n    \r\n        ReactDom.render(element, this._bottomPlaceholder.domElement);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onDispose(): void {\r\n    console.log('[TenantGlobalNavBarApplicationCustomizer._onDispose] Disposed custom top and bottom placeholders.');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}